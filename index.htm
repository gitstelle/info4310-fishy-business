<html>

<head>
    <link rel="stylesheet" href="styles.css">
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <script src="https://d3js.org/topojson.v3.min.js"></script>
    <script src="https://unpkg.com/scrollama"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-array@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo@3"></script>
    <script src="https://cdn.jsdelivr.net/npm/d3-geo-projection@4"></script>
    <script src="scroll.js"></script>
    <title>Fishy Business</title>
    <div class="progressBar">
        <svg id="rectangles">
            <rect id="progress" width="0" height="10" style="fill:#2942a5;" />
        </svg>
    </div>
</head>

<body>

    <section id="scrollViz">
        <div id="graphic">
            <div id="vis">
                <!-- <div class="alignVertical"> -->
                <div class="menu fancyFont alignVertical">
                    <h2>Catch of the Day</h2>


                    <!-- Salmon Order -->
                    <div class="order alignVertical">
                        <text id=salmon class="menuTitle hover-underline-animation fadeAnimation">Miso
                            Salmon | $31</text>
                        <p>Served with bok choy, ginger rice, and microgreens.</p>
                    </div>
                    <!-- Shrimp Order -->
                    <div class="order alignVertical">
                        <text id=shrimp class="menuTitle hover-underline-animation fadeAnimation">Spicy
                            Cajun Shrimp | $27</text>
                        <p>Served with cheesy grits and a big spoon.</p>

                    </div>
                    <!-- Tilapia Order -->
                    <div class="order alignVertical">
                        <text id=tilapia class="menuTitle hover-underline-animation fadeAnimation">Fried
                            Tilapia Sandwich | $23</text>
                        <p>Served with coleslaw, pickles, tartar sauce, and a side of fries.</p>
                    </div>
                    <!-- </div> -->
                </div>

                <div class="receipt hiddenRemove">
                    <h2 class="textCenter fancyFont">Fishy Business</h2>
                    <h3 class="textCenter fancyFont">fishy-business.onrender.com</h3>
                    <hr class="dashed-line">
                    <table>
                        <col width="70%">
                        <col width="30%">
                        <tr>
                            <th id="dishName"></th>
                            <th id="dishPrice"></th>
                        </tr>
                        <tr>
                            <th id="water"></th>
                            <th id="waterPrice"></th>
                        </tr>
                        <tr>
                            <th id="land"></th>
                            <th id="landPrice"></th>
                        </tr>
                        <tr>
                            <th id="nitrogen"></th>
                            <th id="nitrogenPrice"></th>
                        </tr>
                        <tr>
                            <th id="phos"></th>
                            <th id="phosPrice"></th>
                        </tr>
                    </table>
                    <hr class="dashed-line">
                </div>

                <div class="map hiddenRemove">
                    <svg id="choropleth" height="600" width="800"
                        style="background: white; border: 1px solid gray"></svg>
                </div>


                <div class="lineGraph hiddenRemove">
                    <h3 id="lineGraphTitle" class="textCenter">Capture Fisheries vs. Aquaculture Production (1960-2018)
                        in Metric Tons</h3>
                    <div class="buttons"> </div>

                    <svg id="graph" height="500" width="800"
                        style="background: white; margin-top:0px; border: 1px solid gray"></svg>
                </div>
            </div>

            <div id="sections">

                <section id="menu" class="step">
                    <div>
                        <header id=heading class="fancyFont">
                            <h1>Fishy Business</h1>
                            <h2>The cost of your filet from plate to sea</h2>
                        </header>
                        <h3 id="author">By Estelle Hooper, Eva Ruse, Gabriella Chu</h3>
                        <p>Welcome to our restaurant, Fishy Business! We will be your servers today.</p>
                        <p class="fadeInOut">Please order any of our specials!</p>
                        <div id='scrollInfo' class="invisible">
                            <h4 id="scrollText" class="textCenter bounce">scroll to continue</h4>
                            <div class="scroll-down"></div>
                        </div>

                    </div>
                </section>

                <div id="hiddenSections" class="hidden">

                    <section id="text1" class="step" height="100vh">
                        <p>We hope you enjoyed your meal!</p>
                        <p>However, it looks like there are some extra costs...</p>
                    </section>

                    <section id="text2" class="step" height="100vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                    <section id="text3" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text4" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                    <section id="text1000" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text5" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text10" class="step" height="50vh">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>

                    <section id="text6" class="step" height="100vh">
                        <h2> Top Five Exporters of <span></span></h2>
                        <p style="font-size:21px;text-align:left;width:100%;"> Certain types of fish are exported more
                            heavily in some countries compared to others.
                            Around <b>600 million</b> livelihoods worldwide are estimated to depend at least partially
                            on
                            fisheries and aquacultures. This "blue economy" is particularly important in lower-income
                            countries.

                        </p>
                        <p class="fadeInOut" style="font-size:23px;">Click on a country pin for more information about the country's fishing and export industry.</p>

                        <hr style="width:100%;stroke:black;size:5;" class="hiddenRemove">
                        <p id="lineindia" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">In terms of total fisheries and
                            aquaculture
                            production, in 2008-2010 and in 2012, India was the second major producer in the world,
                            and in 2017 ranked third. Export earnings from fish and fishery products totaled about 7.2
                            billion USD in 2017, with shrimps contributing over 65%.
                        </p>
                        <p id="linechina" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Since 2002, China is the world's largest
                            exporter
                            of fish and fishery products, with exports reaching 19.7 billion USD in 2015. In the last
                            few years, China has significantly increased its imports of fish and fishery products, and
                            became the world's third largest fish importer since 2012, with imports worth 8.5 billion
                            USD in 2014.

                        </p>
                        <p id="linesweden" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Aquaculture in Sweden is reported to be
                            14,800
                            tonnes in 2017, which is 6% in the total fish production of 247,400 tonnes in the same year.
                            In 2017, imports of fish and fishery products were valued at 4.9 billion USD, exceeding the
                            value of exports by 0.8 billion USD.
                        </p>
                        <p id="linedenmark" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Denmark is the fifth largest exporter of
                            fish
                            and fishery products in the world. A significant share of Danish total fishery production is
                            exported, with the EU as the main market with a share of about 80%. In 2012, exports of fish
                            and fishery products were valued at USD 4.1 billion and imports reached USD 3.1 billion
                        </p>
                        <p id="lineunitedkingdom" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">The UK is a net importer of fish and
                            fishery products
                            and USD 4.1 billion of fish and fishery products were imported in 2015. In the same year,
                            total exports of fish and fishery products were worth USD 2.5 billion. Aquaculture
                            production is dominated by Atlantic salmon, followed by marine molluscs and rainbow trout,
                            while many other species are farmed in small volume.
                        </p>
                        <p id="linechile" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">In 2019 the total value of exports of
                            fishery
                            products, including fish waste and coral, reached USD 6.56 billion, or 9.5% of national
                            exports. Fishing and aquaculture activity as a whole ranks third in the most important
                            export sectors at the national level.

                        </p>
                        <p id="linevietnam" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Vietnam is the third major exporter of
                            fish and
                            fishery products in the world, with exports valued at USD 8.5 billion in 2017. An important
                            proportion of these exports consisted of Pangasius, shrimps and tuna. Aquaculture employs an
                            estimated 2.6 million people, with one million jobs in shrimp aquaculture alone, while
                            another 1.8 million people are marine fishers.
                        </p>
                        <p id="lineindonesia" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;"> In 2013, the total value of exported
                            fishery
                            commodities was USD 3.8 billion, while imports to the country amounted to USD 0.4 billion.
                            The fishing industry accounted for 21% of Indonesia's agricultural economy and 3% of
                            national GDP in 2012
                        </p>
                        <p id="linethailand" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Marine shrimp is the predominant export
                            species
                            and makes an important contribution to export earnings. More than 90% of farmed marine
                            shrimp is exported. In 2007 its production was 501,200 tons, with a value of around 1,750
                            million USD. Of the total coastal aquaculture production, marine shrimp represented 57% in
                            quantity and 93% in value.
                        </p>
                        <p id="linehonduras" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">In 2013, aquaculture represented 89% of
                            the
                            total fishing production with production at 70,400 tons. Shrimp and tilapia are two of the
                            main species in aquaculture. In 2013, 49,400 tons of shrimp were produced. Tilapia farming
                            and exports have also grown significantly in recent years, and in 2013 21,000 tons of
                            tilapia were produced.
                        </p>
                        <p id="linemexico" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Total aquaculture production was
                            estimated at 251
                            000 tonnes for 2019, a considerable increase since 2000, tilapia and shrimp being the most
                            important species produced. Fish export is an important part of the coastal economies, with
                            the United States of America as main market for shrimp exports.
                        </p>
                        <p id="linenetherlands" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;">Total capture production by the
                            Netherlands
                            in 2013 was about 327, 400 tonnes, and Aquaculture production was about 60, 300 tonnes in
                            2014. In 2014, imports were valued at 4.0 billion USD, whereas exports generated over 4.6
                            billion USD, going mostly to European countries.
                        </p>
                        <p id="linenorway" class="mapImp hiddenRemove"
                            style="font-size:20px;text-align:left;width:100%;"> Norway, in terms of value, is the
                            world's second largest exporter of fish and fish products by value. In 2009, Norwegian
                            production of farmed salmon had reached almost 860,000 tonnes, with the export value of
                            salmon and trout at almost 4.0 billion USD. The fisheries sector is the second largest
                            single export industry, after oil and gas, and represented 5.7 percent of total Norwegian
                            exports in 2009.
                        </p>





                    </section>

                    <section id="lineGraph" class="step" height="100vh">
                        <p>Aquacultures, or farm-raised fish tend to be a more sustainable option because they reduce
                            stress on wild fish populations and their involvement in the marine food web. However,
                            aquacultures can harm the environment with contamination and waste, and can provide less
                            nutrients than capture fisheries.</p>
                        <p id="linesalmon" class="lineGraphImp hiddenRemove">For all the top five countries that export
                            <strong>salmon,</strong> <span class="capture">capture fisheries</span> are much more
                            prominent than <span class="aqua">aquacultures</span>, though aquaculture production is
                            generally on the rise.
                        </p>
                        <p id="lineshrimp" class="lineGraphImp hiddenRemove">For most of the top five countries that
                            export
                            <strong>shrimp,</strong> <span class="aqua">aquacultures</span> have recently been
                            much more prominent than <span class="capture">capture fisheries.</span> The opposite is
                            true for Thailand, the 5th highest exporter.
                        </p>
                        <p id="linetilapia" class="lineGraphImp hiddenRemove">For most of the top five countries that
                            export
                            <strong>tilapia,</strong> <span class="aqua">aquacultures</span> are
                            much more prominent than <span class="capture">capture fisheries.</span> The opposite is
                            true for Mexico and the Netherlands, the 4th and 5th highest exporters.
                        </p>
                        <p class="fadeInOut">Explore other countries and hover over the graph for more precise
                            information.</p>
                    </section>
                    <section id="text10" class="step" height="400px">
                        <!-- DO NOT DELETE MUST LEAVE EMPTY -->
                    </section>
                </div>


            </div>
            <div id="chartContainer">
                <p id="titleFreshwater" class="barchartTitle">Freshwater Consumption (m<sup>3</sup>)</p>
                <p id="titleLand" class="barchartTitle hiddenRemove">Land Use (m<sup>2</sup>)</p>
                <p id="titleNitrogen" class="barchartTitle hiddenRemove">Nitrogen Emitted (kg)</p>
                <p id="titlePhosphorous" class="barchartTitle hiddenRemove">Phosphorous Emitted (kg)</p>

                <p id="barChartSubtitle">Comparison to Other Seafood</p>
                <svg id="bar1" height="425" width="550"></svg>
                <p id="citeFreshwater" class="cite">Source: <a
                        href='https://ourworldindata.org/grapher/freshwater-use-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Freshwater use per kilogram of seafood production
                    m<sup>3</sup> per kilogram (2021)</p>

                <p id="citeLand" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/land-use-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Land use per kilogram of seafood production
                    m<sup>2</sup> per kilogram (2021)</p>

                <p id="citeNitrogen" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/nitrogen-emissions-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Nitrogen emissions per tonne of seafood per kilogram
                    (2021) (calculations were converted from tonne to kg). Conversions were done using <a
                        href='https://www.aqua-calc.com/' target="_blank">Aqua-Calc.</a></p>
                <p id="citePhosphorous" class="cite hiddenRemove">Source: <a
                        href='https://ourworldindata.org/grapher/phosphorous-emissions-seafood?tab=table&country=~Salmon+%28farmed%29'
                        target="_blank">Our World in Data.</a> Phosphorous emissions per tonne of seafood per kilogram
                    (2021) (calculations were converted from tonne to kg). Conversions were done using <a
                        href='https://www.aqua-calc.com/' target="_blank">Aqua-Calc.</a></p>
            </div>
            <div id="infoGraphicContainer">
                <!-- append infographic images here -->
                <!-- freshwater -->
                <div id=freshwatersalmon class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.16 m<sup>3</sup> of freshwater is consumed, which is about
                        <strong>42 gallons.</strong>
                    </p>
                    <img src="images/freshwater-salmon.png" width="350"> </img>
                </div>
                <div id=freshwatertilapia class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 1.23 m<sup>3</sup> of freshwater is consumed, which is
                        about <strong>325 gallons.</strong></p>
                    <img src="images/freshwater-tilapia.png" width="350"> </img>
                </div>
                <div id=freshwatershrimp class="freshwater hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.22 m<sup>3</sup> of freshwater is consumed, which is about
                        <strong>58 gallons.</strong>
                    </p>
                    <img src="images/freshwater-shrimp.png" width="350"> </img>
                </div>
                <!-- land -->
                <div id=landsalmon class="land hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 4.86 m<sup>2</sup> of land is used, which is about
                        <strong>1.2 king-sized mattresses.</strong>
                    </p>
                    <img src="images/land-salmon.png" width="350"> </img>
                </div>
                <div id=landtilapia class="land hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 15.27 m<sup>2</sup> of land is used, which is
                        about <strong>3.9 king-sized mattresses.</strong></p>
                    <img src="images/land-tilapia.png" width="350"> </img>
                </div>
                <div id=landshrimp class="land hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 13.18 m<sup>2</sup> of land is used, which is about
                        <strong>3.4 king-sized mattresses.</strong>
                    </p>
                    <img src="images/land-shrimp.png" width="350"> </img>
                </div>
                <!-- nitrogen -->
                <div id=nitrogensalmon class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.111 kg of nitrogen is emitted, which is about
                        <strong>157 cans of Lysol (19 fl oz).</strong>
                    </p>
                    <img src="images/nitrogen-salmon.png" width="350"> </img>
                </div>
                <div id=nitrogentilapia class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 0.200 kg of nitrogen is emitted, which is
                        about <strong>284 cans of Lysol (19 fl oz).</strong></p>
                    <img src="images/nitrogen-tilapia.png" width="350"> </img>
                </div>
                <div id=nitrogenshrimp class="nitrogen hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.123 kg of nitrogen is emitted, which is about
                        <strong>180 cans of Lysol (19 fl oz).</strong>
                    </p>
                    <img src="images/nitrogen-shrimp.png" width="350"> </img>
                </div>
                <!-- phosphorous -->
                <div id=phossalmon class="phos hiddenRemove">
                    <p>For 1 kg of <strong>salmon,</strong> 0.026 kg of phosphorous is emitted, which is about
                        <strong>2.9 teaspoons.</strong>
                    </p>
                    <img src="images/phosphorous-salmon.png" width="350"> </img>
                </div>
                <div id=phostilapia class="phos hiddenRemove">
                    <p>For 1 kg of <strong>tilapia,</strong> 0.024 kg of phosphorous is emitted, which is
                        about <strong>2.7 teaspoons.</strong></p>
                    <img src="images/phosphorous-tilapia-shrimp.png" width="350"> </img>
                </div>
                <div id=phosshrimp class="phos hiddenRemove">
                    <p>For 1 kg of <strong>shrimp,</strong> 0.024 kg of phosphorous is emitted, which is about
                        <strong>2.7 teaspoons.</strong>
                    </p>
                    <img src="images/phosphorous-tilapia-shrimp.png" width="350"> </img>
                </div>
            </div>
            <div id='AbsScrollInfo' class="invisible">
                <h4 id="scrollText" class="textCenter bounce">scroll to continue</h4>
                <div class="scroll-down"></div>
            </div>
            <div id="resetContainer" class="transparent">
                <!-- append button here -->
            </div>
        </div>
        </div>

</body>

<script>
    // d3.selectAll(".menuTitle").
    const map_svg = d3.select("#choropleth");
    const map_width = map_svg.attr("width");
    const map_height = map_svg.attr("height");
    const map_margin = { top: 5, right: 5, bottom: 5, left: 5 };
    const mapWidth = map_width - map_margin.left - map_margin.right;
    const mapHeight = map_height - map_margin.top - map_margin.bottom;
    const map = map_svg.append("g")
        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")");

    const graph_svg = d3.select("#graph");
    const graph_width = graph_svg.attr("width");
    const graph_height = graph_svg.attr("height");
    const graph_margin = { top: 20, right: 20, bottom: 60, left: 100 };
    const graphWidth = graph_width - graph_margin.left - graph_margin.right;
    const graphHeight = graph_height - graph_margin.top - graph_margin.bottom;
    const graph = graph_svg.append("g")
        .attr("transform", "translate(" + graph_margin.left + "," + graph_margin.top + ")");

    let graph_annotations = graph_svg.append("g").attr("id", "annotations");

    const chart1 = d3.select("#bar1");
    const width1 = chart1.attr("width");
    const height1 = chart1.attr("height");
    const margin1 = { top: 35, right: 10, bottom: 45, left: 150 };
    const chartWidth1 = width1 - margin1.left - margin1.right;
    const chartHeight1 = height1 - margin1.top - margin1.bottom;
    let annotations1 = chart1.append("g").attr("id", "annotations");
    let annotations2 = chart1.append("g").attr("id", "annotations").attr('visibility', 'hidden');
    let annotations3 = chart1.append("g").attr("id", "annotations").attr('visibility', 'hidden');
    let annotations4 = chart1.append("g").attr("id", "annotations").attr('visibility', 'hidden');
    const chartArea1 = chart1.append("g").attr("transform", "translate(" + margin1.left + "," + margin1.top + ")");


    const getData = async function () {

        // bar chart data
        let water_use = await d3.csv("data/water-use.csv", d3.autotype);
        let land_use = await d3.csv("data/land-use.csv", d3.autotype);
        let nitrogen_emissions = await d3.csv("data/nitrogen-use.csv", d3.autotype);
        let phos_emissions = await d3.csv("data/phos-use.csv", d3.autotype);

        // map data
        const world_data = await d3.json("data/countries-110m.json");
        const centroid_data = await d3.csv("data/centroids.csv", d3.autotype);

        // line graph data
        let compareFishing = await d3.csv("data/capture-fisheries-vs-aquaculture.csv", d3.autotype);


        // can either be Salmon, Shrimp, or Tilapia
        salmon_water_use = water_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        tilapia_water_use = water_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Freshwater use (m3 / kg edible weight)']
        shrimp_water_use = water_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Freshwater use (m3 / kg edible weight)']

        salmon_land_use = land_use.filter(d => d.Entity === 'Salmon (farmed)')[0]['Land use (m2 / kg edible weight)']
        tilapia_land_use = land_use.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Land use (m2 / kg edible weight)']
        shrimp_land_use = land_use.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Land use (m2 / kg edible weight)']

        salmon_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        tilapia_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Nitrogen (kgN / t edible weight)']
        shrimp_nitrogen_emissions = nitrogen_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Nitrogen (kgN / t edible weight)']

        salmon_phos_emissions = phos_emissions.filter(d => d.Entity === 'Salmon (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        tilapia_phos_emissions = phos_emissions.filter(d => d.Entity === 'Tilapia (farmed)')[0]['Phosphorous (kgP / t edible weight)']
        shrimp_phos_emissions = phos_emissions.filter(d => d.Entity === 'Shrimp (farmed)')[0]['Phosphorous (kgP / t edible weight)']

        // GLOBAL VARS
        // fish selection: salmon, shrimp, tilapia
        var selectedFish = null

        // boolean to track if the receipt should be added
        var addReceipt = false

        // scales
        var combinedScale = 0
        var graph_leftAxis = 0

        // selections
        receipt = d3.select(".receipt")
        menu = d3.select(".menu")
        chartCont = d3.select('#chartContainer')
        infoCont = d3.select('#infoGraphicContainer')
        allCite = d3.selectAll('.cite')
        allBarTitle = d3.selectAll('.barChartTitle')

        createScales();

        // buttons for line graph

        initial = async function () {
            d3.select('#AbsScrollInfo').classed('invisible', true)
            /*
            handles receipt, selects infographics
            */

            // in case user scrolls too fast
            chartCont.style('opacity', 0)
            infoCont.style('opacity', 0)

            currentDish = d3.selectAll('.currentDish').classed('fadeIn', false);
            await currentDish.transition().style('opacity', 0).end();

            addReceipt = true;

            menu.classed("hidden", false);
            menu.transition().style('opacity', 1).style('transform', "translateX(0px)")

            receipt.classed("hiddenRemove", true);
        }

        first = async function () {
            // remove prev Receipt info
            receipt.select("#water").text('')
            receipt.select("#waterPrice").text('')

            d3.select('#AbsScrollInfo').classed('invisible', false)

            await menu.transition().style('opacity', 0).style('transform', "translateX(-200px)").end()
            await infoCont.transition().style('opacity', 0).end()

            receipt = d3.select(".receipt")
            receipt.transition().duration(200).style('transform', 'translateX(0px)');
            receipt.classed('hiddenRemove', false)
            receipt.classed('fadeIn', true)

            chartCont.style('opacity', 0)

            if (addReceipt == true) {
                infoCont.style("opacity", 0);

                menu.classed('hidden', true);
                menu.attr("height", 0)

                receipt.classed('hidden', false);


                if (selectedFish === 'salmon') {
                    dish = "Miso Salmon"
                    price = "$31.00"
                }
                else if (selectedFish === 'shrimp') {
                    dish = "Spicy Cajun Shrimp"
                    price = "$27.00"
                }
                else if (selectedFish === 'tilapia') {
                    dish = "Fried Tilapia Sandwich"
                    price = "$23.00"
                }

                receipt.select("#dishName").text(dish).classed('fadeIn', true)
                receipt.select("#dishPrice").text(price).classed('fadeIn', true)

                addReceipt = false

                d3.select("#text1").transition().style('opacity', 1);
            }

        }
        addWaterInfo = async function () {
            // hide prev infographics
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            // unhide water infographic
            info = d3.select("#freshwater" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            // in case user scrolls too fast

            menu.transition().style('opacity', 0).style('transform', "translateX(-200px)");

            // move receipt to make room for the infographic
            await receipt.transition().duration(200).style('transform', 'translateX(-275px)').end();

            receipt.select("#water").text('Freshwater').classed('fadeIn', true)
            receipt.select("#waterPrice").html(fish_water_use + ' m<sup>3</sup').classed('fadeIn', true)

            infoCont.transition().duration(200).style('opacity', 1).end()
        }

        addWaterBar = async function () {
            annotations2.selectAll('.x-axis').attr('visibility', 'hidden')
            annotations1.selectAll('.x-axis').attr('visibility', 'visible')
            // remove prev Receipt info
            receipt.select("#land").text('')
            receipt.select("#landPrice").text('')

            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titleFreshwater").classed('hiddenRemove', false)

            chartCont.transition().duration(200).style('opacity', 1)

            bottomAxis1.scale(barScale1);
            bottomAxisG1.transition().call(bottomAxis1);

            chartArea1.selectAll('rect.bar').data(water_use)
                .join('rect')
                .attr('class', 'bar')
                .attr("fill", d => highlightBar('freshwater', d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr('x', d => barScale1(0))
                .attr('y', d => leftAxisScale1(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                .attr("height", leftAxisScale1.bandwidth())
                .attr("width", d => barScale1(Number(d['Freshwater use (m3 / kg edible weight)'])) - barScale1(0))
        }

        addLandInfo = async function () {
            // hide previous infographics
            await d3.selectAll('.freshwater').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide land infographic
            info = d3.select("#land" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            receipt.select("#land").text('Land').classed('fadeIn', true)
            receipt.select("#landPrice").html(fish_land_use + " m<sup>2</sup>").classed('fadeIn', true)


        }

        addLandBar = async function () {
            // remove prev Receipt info
            receipt.select("#nitrogen").text('')
            receipt.select("#nitrogenPrice").text('')

            await chartCont.transition().duration(200).style('opacity', 1).end();
            drawChart(land_use, barScale2, leftAxisScale1, 'Land use (m2 / kg edible weight)', 'land', bottomAxis2, bottomAxisG2, annotations1, annotations2, annotations3)
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titleLand").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citeLand").classed('hiddenRemove', false)

        }

        addNitrogenInfo = async function () {
            // hide previous infographics
            await d3.selectAll('.land').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide nitrogen infographic
            info = d3.select("#nitrogen" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);

            receipt.select("#nitrogen").text('Nitrogen Emitted').classed('fadeIn', true)
            receipt.select("#nitrogenPrice").text(fish_nitrogen_emissions + ' kg').classed('fadeIn', true)
        }

        addNitrogenBar = async function () {
            // remove prev Receipt info
            receipt.select("#phos").text('')
            receipt.select("#phosPrice").text('')

            await chartCont.transition().duration(200).style('opacity', 1).end();

            drawChart(nitrogen_emissions, barScale3, leftAxisScale1, 'Nitrogen (kgN / t edible weight)', 'nitrogen', bottomAxis3, bottomAxisG3, annotations2, annotations3, annotations4)
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titleNitrogen").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citeNitrogen").classed('hiddenRemove', false)

        }

        addPhosInfo = async function () {
            // hide previous infographics
            await d3.selectAll('.nitrogen').transition().duration(100).style('opacity', 0).end();
            infoCont.selectAll('div').classed("hiddenRemove", true)
            infoCont.selectAll('div').classed("fadeIn", false)

            await chartCont.transition().duration(200).style('opacity', .3).end();

            // unhide phos infographic
            info = d3.select("#phos" + selectedFish)
            info.classed('hiddenRemove', false);
            info.classed('fadeIn', true);
            receipt.select("#phos").text('Phosphorous Emitted').classed('fadeIn', true)
            receipt.select("#phosPrice").text(fish_phos_emissions + ' kg').classed('fadeIn', true)

        }

        addPhosBar = async function () {

            await d3.select(".map").transition().duration(100).style('opacity', 0).end();
            d3.select(".map").classed("hiddenRemove", true);

            // make receipt invisible
            receipt.classed('hiddenRemove', false);

            // make infographic visible
            infoCont.transition().style('opacity', 1)

            await chartCont.transition().duration(200).style('opacity', 1).end();
            drawChart(phos_emissions, barScale4, leftAxisScale1, 'Phosphorous (kgP / t edible weight)', 'phosphorous', bottomAxis4, bottomAxisG4, annotations3, annotations4, annotations3)
            allBarTitle.classed('hiddenRemove', true);
            d3.select("#titlePhosphorous").classed('hiddenRemove', false)

            allCite.classed('hiddenRemove', true);
            d3.select("#citePhosphorous").classed('hiddenRemove', false)

        }

        addMap = async function () {
            // make receipt invisible
            infoCont.style("opacity", 0);

            receipt.classed('fadeIn', false);
            receipt.classed('hiddenRemove', true);

            // make bar chart invisible
            chartCont.transition().style('opacity', 0)

            // make infographic invisible
            infoCont.transition().style('opacity', 0)

            // make map visible
            d3.select(".map").classed('hiddenRemove', false);
            d3.select(".map").transition().duration(100).style("opacity", 1);

            //if scrolling backwards
            d3.select(".lineGraph").classed('hiddenRemove', true);
        }

        function animateGraph() {
            // remove any previous scales, and lines
            d3.selectAll(".y-axis").remove();
            d3.selectAll(".x-axis").remove();

            graph.selectAll("path").remove();

            let graph_leftGridlines = d3.axisLeft(combinedScale)
                .tickSize(-graphWidth - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "y-axis")
                .attr("transform", `translate(${graph_margin.left - 10},${graph_margin.top})`)
                .call(graph_leftAxis)

            let graph_bottomAxis = d3.axisBottom(dateScale)
            let graph_bottomGridlines = d3.axisBottom(dateScale)
                .tickSize(-graphHeight - 10)
                .tickFormat("")
            graph_annotations.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${graph_margin.left},${graphHeight + graph_margin.top + 10})`)
                .call(graph_bottomAxis);


            //Making the line generators
            var capturelineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Capture fisheries production (metric tons)'])))
                .curve(d3.curveMonotoneX);

            var aqualineGen = d3.line()
                .x(d => dateScale(d['Year']))
                .y(d => combinedScale((d['Aquaculture production (metric tons)'])))
                .curve(d3.curveMonotoneX);
            //     ;

            // Making area transitions

            const capture_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Capture fisheries production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));


            const aqua_area = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function (d) { return combinedScale(d['Aquaculture production (metric tons)']); })
                .curve(d3.curveCatmullRom.alpha(0.5));

            // Making area transitions
            const zeroArea = d3.area()
                .x(function (d) { return dateScale(d.Year); })
                .y0(graphHeight)
                .y1(function () { return 0; })
                .curve(d3.curveCatmullRom.alpha(0.5));


            //aqua
            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#FF3B3B')
                .style("opacity", 0.3)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return capture_area(dataset) //must pass country dataset
                })
                .style('fill', '#FF3B3B')
                .style("opacity", 0.3)


            graph.append("path")
                .attr("d", function (d) {
                    return zeroArea(dataset) //must pass country dataset
                })
                .style('fill', '#1786FF')
                .style("opacity", 0.3)
                .transition()
                .duration(1500)
                .attr("d", function (d) {
                    return aqua_area(dataset) //must pass country dataset
                })
                .style('fill', '#1786FF')
                .style("opacity", 0.3)

            // Making the lines
            const capture_path = graph.append("path")
                .datum(capture_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "#FF3B3B")
                .attr("stroke-width", 2)
                .attr("d", capturelineGen);

            const aqua_path = graph.append("path")
                .datum(aqua_subset)
                .attr("class", "line")
                .attr("fill", "none")
                .attr("stroke", "#1786FF")
                .attr("stroke-width", 2)
                .attr("d", aqualineGen);

            // Making line transitions
            const capture_length = capture_path.node().getTotalLength();

            capture_path.attr("stroke-dasharray", capture_length + " " + capture_length)
                .attr("stroke-dashoffset", capture_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)

            const aqua_length = aqua_path.node().getTotalLength();

            aqua_path.attr("stroke-dasharray", aqua_length + " " + aqua_length)
                .attr("stroke-dashoffset", aqua_length)
                .transition()
                .ease(d3.easeLinear)
                .attr("stroke-dashoffset", 0)
                .delay(1500)
                .duration(3000)

            // adding line graph markers
            let mouseGroup = graph.append("g");
            let xMarker = mouseGroup.append("line")
                .attr("id", "xMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 1)
                .attr("y1", 0)
                .attr("y2", graphHeight)
                .attr("visibility", "hidden");

            let valueMarker = mouseGroup.append("circle")
                .attr("id", "valueMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 2)
                .attr("r", 10)
                .attr("visibility", "hidden");


            let valueMarker2 = mouseGroup.append("circle")
                .attr("id", "valueMarker")
                .attr("fill", "none")
                .attr("stroke", "black")
                .attr("stroke-width", 2)
                .attr("r", 10)
                .attr("visibility", "hidden");

            let activeRegion = mouseGroup.append("rect")
                .attr("id", "activeRegion")
                .attr("width", graphWidth)
                .attr("height", graphHeight)
                .attr("fill", "none")
                .attr("pointer-events", "all");

            // line graph tooltip code
            const mouseover = graph_svg.append("g").attr("class", "mouseover")
                .attr("transform", `translate(${graph_margin.left + 15},${graph_margin.top + 15})`);

            function stringLen(str) {
                const dummytext = mouseover.append("text").attr("class", "legendtext").attr("visibility", "hidden");
                dummytext.text(str)
                let len = dummytext.node().getComputedTextLength()
                dummytext.remove()
                return len;
            }

            const frame = mouseover.append("rect").attr("class", "frame")
                .attr("x", 0).attr("y", 0)
                .attr("rx", 5).attr("ry", 5)
                .attr("height", 130)
                .attr("opacity", 0.8)
                .attr("pointer-events", "none");
            const textbox = mouseover.append("g").attr("transform", "translate(10,10)");
            const format = d3.format(',d');


            // When the mouse enters, show the annotations
            activeRegion.on("mouseover", function () {
                xMarker.attr("visibility", "");
                valueMarker.attr("visibility", "");
                valueMarker2.attr("visibility", "");
                mouseover.attr("visibility", "");
            });

            // When the mouse leaves, hide the annotations
            activeRegion.on("mouseout", function () {
                xMarker.attr("visibility", "hidden");
                valueMarker.attr("visibility", "hidden");
                valueMarker2.attr("visibility", "hidden");
                mouseover.attr("visibility", "hidden");
            });

            let findDate = d3.bisector(d => d.Year).right;

            activeRegion.on("mousemove", function (evt) {

                let location = d3.pointer(evt);
                let x = location[0];
                let xDate = dateScale.invert(x);
                let index = findDate(dataset, xDate);
                let d = dataset[index];

                let xPos = dateScale(d['Year']);
                let yPos = combinedScale(d['Capture fisheries production (metric tons)']);
                let yPos2 = combinedScale(d['Aquaculture production (metric tons)']);

                xMarker.attr("x1", xPos).attr("x2", xPos);
                valueMarker.attr("cx", xPos).attr("cy", yPos);
                valueMarker2.attr("cx", xPos).attr("cy", yPos2);
                textbox.html('');

                let countryName = `${d['Entity']}`;
                let year = `${d['year']}`;
                let aqua = `${format(d['Aquaculture production (metric tons)'])} metric tons`;
                let capture = `${format(d['Capture fisheries production (metric tons)'])} metric tons`;

                let maxWidth = Math.max(stringLen(countryName), stringLen(aqua), stringLen(capture))
                frame.attr("width", maxWidth + 20);

                textbox.append("text").attr('class', 'tooltipTitle').text(countryName + ' (' + year + ')')
                    .attr("x", 0).attr("y", 10);
                textbox.append("text").attr('class', 'capture textBold').text("Capture Fisheries")
                    .attr("x", 0).attr("y", 40);
                textbox.append("text").attr('class', 'capture').text(capture)
                    .attr("x", 0).attr("y", 60);
                textbox.append("text").attr('class', 'aqua textBold').text("Aquaculture")
                    .attr("x", 0).attr("y", 90);
                textbox.append("text").attr('class', 'aqua').text(aqua)
                    .attr("x", 0).attr("y", 110);

            });
        }

        //reset button

        buttonCont = d3.select('#resetContainer');
        resetButton = buttonCont.append("button").attr("class", "resetButton")
        resetButton.append('h3').text("Order Again?")
        resetButton.on("click", function () {
            window.location.reload(true);
        })

        addLineGraph = async function () {
            d3.select("#line" + selectedFish).classed('hiddenRemove', false);

            buttonCont.style('z-index', 104)
            d3.select('#AbsScrollInfo').classed('invisible', false)
            buttonCont.classed('fadeIn', false);
            buttonCont.classed('transparent', true);
            animateGraph();

            // make map invisible
            d3.select(".map").classed('hiddenRemove', true);

            // make line graph visible
            d3.select(".lineGraph").classed('hiddenRemove', false);
            d3.select('.lineGraph').classed('fadeIn', true)

            // adding buttons
            if (addButtons == true) {
                addButtons = false;
                const buttonsdiv = d3.select('.buttons')
                buttons = buttonsdiv.selectAll('button').data(buttonsData).join('button')

                d3.select(".buttons button:first-child").classed("selectedButton", true);

                buttons.on('click', function (d, i) {
                    [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph(i)
                    animateGraph()
                    d3.selectAll(".buttons button").classed("selectedButton", false)
                    d3.select(this).classed('selectedButton', true)
                })

                buttons.append('h3').html(function (d, i) { return d });
            }
        }


        showReset = async function () {
            buttonCont.style('z-index', 200)
            d3.select('#AbsScrollInfo').classed('invisible', true)
            d3.select('.lineGraph').classed("hiddenRemove", true);
            buttonCont.classed('fadeIn', true);
            buttonCont.classed('transparent', false);

        }


        function createScales() {
            // Setting up scales and axes for the 4 bar charts
            //removing "(farmed)" from each of the fish entities
            species = water_use.map(d => d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1))

            //making scales and axes for water
            water_values = water_use.map(d => Number(d['Freshwater use (m3 / kg edible weight)']))
            land_values = land_use.map(d => Number(d['Land use (m2 / kg edible weight)']))
            nitrogen_values = nitrogen_emissions.map(d => Number(d['Nitrogen (kgN / t edible weight)']))
            phos_values = phos_emissions.map(d => Number(d['Phosphorous (kgP / t edible weight)']))

            leftAxisScale1 = d3.scaleBand().domain(species).range([chartHeight1, 0]).padding(0.05);

            barvalueExtent1 = d3.extent(water_values)
            barScale1 = d3.scaleLinear().domain([0, barvalueExtent1[1]]).range([0, chartWidth1]);

            let leftAxis1 = d3.axisLeft();
            let leftAxisG1 = annotations1.append("g")
                .attr("class", "y-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1}, ${margin1.top})`);
            leftAxis1.scale(leftAxisScale1);
            leftAxisG1.transition().call(leftAxis1);

            bottomAxis1 = d3.axisBottom();
            bottomAxisG1 = annotations1.append("g")
                .attr("class", "x-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            bottomAxis1.scale(barScale1);
            bottomAxisG1.transition().call(bottomAxis1);

            //making scales and axes for land
            barvalueExtent2 = d3.extent(land_values)
            barScale2 = d3.scaleLinear().domain([0, barvalueExtent2[1]]).range([0, chartWidth1]);
            bottomAxis2 = d3.axisBottom();
            bottomAxisG2 = annotations2.append("g")
                .attr("class", "x-axis")
                // .attr("opacity", 0)
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            //making scales and axes for nitrogen
            barvalueExtent3 = d3.extent(nitrogen_values)
            barScale3 = d3.scaleLinear().domain([0, barvalueExtent3[1]]).range([0, chartWidth1]);
            bottomAxis3 = d3.axisBottom();
            bottomAxisG3 = annotations3.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)

            //making scales for phos
            barvalueExtent4 = d3.extent(phos_values)
            barScale4 = d3.scaleLinear().domain([0, barvalueExtent4[1]]).range([0, chartWidth1]);
            bottomAxis4 = d3.axisBottom();
            bottomAxisG4 = annotations4.append("g")
                .attr("class", "x-axis")
                .attr("transform", `translate(${margin1.left - 1},${chartHeight1 + margin1.top})`)
        }

        d3.selectAll(".menuTitle")
            .on('click', orderUp)

        function drawGraph(country) {

            country = compareFishing.filter(d => d.Entity === country)
            country = country.filter(d => !isNaN(d['Capture fisheries production (metric tons)']))
            country = country.filter(d => !isNaN(d['Aquaculture production (metric tons)']))

            // sorting by date because Honduras has data out of order, messing up our line animations
            country = country.sort((a, b) => a.Year - b.Year)

            captureExtent = d3.extent(country, d => d['Capture fisheries production (metric tons)']);
            aquaExtent = d3.extent(country, d => d['Aquaculture production (metric tons)'])

            dateExtent = d3.extent(country, d => d['Year']);
            dateScale = d3.scaleTime().domain(dateExtent).range([0, graphWidth]);

            capture_subset = country.map(row => ({
                "Year": row.Year,
                "Capture fisheries production (metric tons)": row["Capture fisheries production (metric tons)"],
            }));

            aqua_subset = country.map(row => ({
                "Year": row.Year,
                "Aquaculture production (metric tons)": row["Aquaculture production (metric tons)"],
            }));

            let combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];

            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);
            graph_leftAxis = d3.axisLeft(combinedScale)

            dataset = country;

            if (selectedFish === 'salmon') {
                buttonsData = salmonCountries;
            }
            else if (selectedFish === 'shrimp') {
                buttonsData = shrimpCountries;
            }
            else if (selectedFish === 'tilapia') {
                buttonsData = tilapiaCountries;
            }


            return [dataset, buttonsData, captureExtent, aquaExtent]
        }

        function orderUp() {
            selectedFish = this.id;

            initial();
            scroll()

            addReceipt = true;
            addButtons = true;

            orders = d3.selectAll(".order")
            menuTitles = d3.selectAll('.menuTitle')

            // the ones the user didn't select, make beige
            menuTitles.classed('orderNotSelected', true)
            orders.classed('orderNotSelected', true)
            d3.select(this).classed('orderNotSelected', false)
            d3.select(this.parentNode).classed('orderNotSelected', false)

            // cannot click another selection
            menu.style("pointer-events", "none")

            // turn off fading text
            menuSection = d3.select('section#menu')
            menuSection.selectAll(".fadeInOut").classed("fadeInOut", false)

            // make arrow visible
            d3.select('#scrollInfo').classed('invisible', false).classed('fadeIn', true);

            if (selectedFish === 'salmon') {
                fish_water_use = salmon_water_use
                fish_land_use = salmon_land_use
                fish_nitrogen_emissions = salmon_nitrogen_emissions
                fish_phos_emissions = salmon_phos_emissions
            }
            else if (selectedFish === 'shrimp') {
                fish_water_use = shrimp_water_use
                fish_land_use = shrimp_land_use
                fish_nitrogen_emissions = shrimp_nitrogen_emissions
                fish_phos_emissions = shrimp_phos_emissions
            }
            else if (selectedFish === 'tilapia') {
                fish_water_use = tilapia_water_use
                fish_land_use = tilapia_land_use
                fish_nitrogen_emissions = tilapia_nitrogen_emissions
                fish_phos_emissions = tilapia_phos_emissions
            }

            // reveal next section
            dishSection = d3.select('#hiddenSections').classed('hidden', false);

            // start of map code

            salmonCountries = ["Norway", "Sweden", "Denmark", "United Kingdom", "Chile"]
            shrimpCountries = ['India', 'China', 'Vietnam', 'Indonesia', 'Thailand']
            tilapiaCountries = ['China', 'Indonesia', 'Honduras', 'Mexico', "Netherlands"];


            const colors = ["#052132", "#00375E", "#005D8F", "#0978AF", "#1A93CF"];
            const topColorScale = d3.scaleOrdinal(colors).domain([0, 1, 2, 3, 4]);

            var countries = topojson.feature(world_data, world_data.objects.countries);

            var countriesMesh = topojson.mesh(world_data, world_data.objects.countries);
            var projection = d3.geoRobinson().fitSize([mapWidth, mapHeight], countries);
            var path = d3.geoPath().projection(projection);

            const firstLetter = selectedFish.charAt(0)

            const firstLetterCap = firstLetter.toUpperCase()

            const remainingLetters = selectedFish.slice(1)

            const capitalizedWord = firstLetterCap + remainingLetters

            d3.selectAll("#text6 h2 span").text(capitalizedWord)

            // coloring function for different fish selections
            function countryColor(country) {
                if (selectedFish === 'salmon') { ranking = salmonCountries.indexOf(country) }
                else if (selectedFish === 'shrimp') { ranking = shrimpCountries.indexOf(country) }
                else if (selectedFish === 'tilapia') { ranking = tilapiaCountries.indexOf(country) }

                if (ranking > -1) {
                    return topColorScale(ranking)
                }
                else {
                    return "#f4f1e4"
                }
            }

            // making the map paths
            let viewport = map.append("g");

            viewport.selectAll(".countries").data(countries.features)
                .join("path")
                .attr("class", "countries")
                .attr('fill', d => countryColor(d.properties.name))
                .attr("d", path)

            viewport.append("path")
                .datum(countriesMesh)
                .attr("class", "country-outline")
                .attr("d", path);

            // making the legend
            // reference: https://stackoverflow.com/questions/41090920/how-to-position-the-legend-in-a-d3-chart
            var legendText = ["#1 Exporter", "#2 Exporter", "#3 Exporter", "#4 Exporter", "#5 Exporter"];

            var legend = map.selectAll(".legend")
                .data(colors)
                .enter().append("g")
                .attr("class", "legend")
                .attr("transform", function (d, i) { return "translate(0," + i * 20 + ")"; });

            legend.append("rect").data(colors)
                .attr("x", 20)
                .attr("y", 450)
                .attr("width", 20)
                .attr("height", 20)
                .attr("fill", d => d)

            legend.append("text").data(legendText)
                .attr("x", 45)
                .attr("y", 465)
                .text(d => d)
                .style("font-size", "12px")



            // making the country marks

            if (selectedFish === "salmon") { selectedCountries = salmonCountries }
            else if (selectedFish === "shrimp") { selectedCountries = shrimpCountries }
            else if (selectedFish === "tilapia") { selectedCountries = tilapiaCountries }

            selectedCountries.forEach((d) => {
                //d is the country name
                selectedCountry = centroid_data.filter(i => i['COUNTRY'] === d);

                let markPos = projection([selectedCountry[0]['longitude'], selectedCountry[0]['latitude']]);

                let pinCountry = selectedCountry[0]["COUNTRY"];

                let textbox = map.append("g")
                    .attr("class", "tooltip")
                    .attr("visibility", "hidden");

                textbox.append("rect")
                    .attr("opacity", 0.8)
                    .attr("fill", "lightgray")
                    .attr("x", 0)
                    .attr("y", 0)
                    .attr("height", 25)
                    .attr("width", function () {
                        if (pinCountry.length < 8) {
                            return pinCountry.length * 10;
                        }
                        else if (pinCountry.length === 8) {
                            return 72;
                        }
                        else if (pinCountry.length === 9) {
                            return 80;
                        }
                        else if (pinCountry.length === 11) {
                            return 95;
                        }
                        else {
                            return 120;
                        }
                    })
                    .attr("alignment-baseline", "hanging")
                    .attr("rx", 8)

                textbox.append("text")
                    .text(pinCountry)
                    .attr("x", 2)
                    .attr("y", 5)
                    .attr("text-anchor", "right")
                    .attr("alignment-baseline", "hanging")

                textbox.attr("transform", `translate(${markPos[0] + 2},${markPos[1] + 3})`);

                map.append("image")
                    .attr('class', 'mark')
                    .attr("xlink:href", "images/mappin.png")
                    .attr("x", markPos[0] - 11)
                    .attr("y", markPos[1] - 14)
                    .attr("width", 20)
                    .attr("height", 20)
                    .on("mouseover", function () {
                        textbox.style("visibility", "visible")
                        d3.select(this).style("cursor", "pointer");
                    })
                    .on("mouseout", function () { textbox.style("visibility", "hidden") })
                    .on("click", clickedPin);

                function clickedPin(event) {

                    d3.selectAll("#text6 .fadeInOut").classed("hiddenRemove", true);

                    d3.selectAll("#text6 hr").classed("hiddenRemove", false);

                    pinCountry = d.toLowerCase().replace(/\s+/g, '')

                    d3.select("#line" + pinCountry).classed('hiddenRemove', false);

                    countryNodes = d3.selectAll(".countries").nodes()

                    select = countryNodes.filter(i => i.__data__.properties.name === d)[0].__data__

                    newcountries = { 'type': 'FeatureCollection', 'features': [select] };


                    viewport.selectAll(".countries").style('display', 'none');
                    viewport.selectAll(".country-outline").style('display', 'none');
                    map.selectAll(".legend").style('display', 'none');
                    map.selectAll(".mark").style('display', 'none');
                    map.selectAll(".tooltip").style('display', 'none');

                    var projection = d3.geoMercator().fitSize([mapWidth / 2, mapHeight], newcountries);
                    var path = d3.geoPath().projection(projection);

                    // Draw the map
                    map_svg.append("g")
                        .selectAll("path")
                        .data(newcountries.features)
                        .enter()
                        .append("path")
                        .attr('class', 'newcountry')
                        .attr("fill", d => countryColor(d.properties.name))
                        .attr("d", path)
                        .style("stroke", "none")


                    var backButton = map.append("rect").attr("fill", "lightgrey")
                        .attr('class', 'backButton')
                        .attr('height', 50)
                        .attr('width', 100)
                        .attr('x', mapWidth - 118)
                        .attr('y', mapHeight - 65)
                        .attr("rx", 5)
                        .attr("ry", 5)
                        .style("stroke", "black")
                        .style("stroke-width", 1)
                        .on("mouseover", function () { d3.select(this).style("cursor", "pointer") });

                    map.append("text").text("Reset Map")
                        .attr("class", "buttonText")
                        .attr('x', mapWidth - 105)
                        .attr('y', mapHeight - 35)
                        .on("mouseover", function () { d3.select(this).style("cursor", "pointer") })
                        .on("click", clickMapButton);



                    backButton.on("click", clickMapButton);

                    function clickMapButton() {
                        viewport.selectAll(".countries").style('display', 'block');
                        viewport.selectAll(".country-outline").style('display', 'block');
                        map.selectAll(".legend").style('display', 'block');
                        map.selectAll(".mark").style('display', 'block');
                        map.selectAll(".tooltip").style('display', 'block');
                        d3.selectAll('.newcountry').style('display', 'none');
                        map.selectAll('.backButton').style('display', 'none');
                        map.selectAll('.backButton').style('display', 'none');
                        map.selectAll(".buttonText").style('display', "none")
                        map.selectAll(".fisheryImage").style('display', "none")
                        map.selectAll(".imageText").style('display', "none")
                        map.selectAll(".fisheryFO").style("display", "none")
                        map.selectAll(".fisheryFOTitle").style("display", "none")

                        d3.select("#line" + pinCountry).classed('hiddenRemove', true);
                        d3.selectAll("#text6 .fadeInOut").classed("hiddenRemove", false);

                        d3.selectAll("#text6 hr").classed("hiddenRemove", true);


                    }


                    var imageLink = "images/" + pinCountry.toLowerCase() + "fishery.jpeg"
                    imageLink = imageLink.replace(/\s+/g, '');


                    // map.append("text")
                    //     .text(d + ' is the number ' + (ranking + 1) + ' exporter of ' + selectedFish + " in the world")
                    //     .attr("class", "imageText")
                    //     .attr('x', mapWidth / 2 + 3)
                    //     .attr('y', mapHeight / 7)
                    //     .style("font-size", 15)

                    map.append("image")
                        .attr("class", "fisheryImage")
                        .attr("xlink:href", imageLink)
                        .attr("x", mapWidth / 2)
                        .attr("y", mapHeight / 6)
                        .attr("transform", "translate(" + map_margin.left + "," + map_margin.top + ")")


                    var foTitle = map.append('foreignObject')
                        .attr("class", "fisheryFOTitle")
                        .attr("width", 360)
                        .attr("height", 50)
                        .attr("x", mapWidth / 2 + 3)
                        .attr("y", 40);


                    firstL = selectedFish.charAt(0)

                    firstLCap = firstL.toUpperCase()

                    remainingL = selectedFish.slice(1)

                    capitalizedFish = firstLCap + remainingL

                    var divTitle = foTitle.append('xhtml:div')
                        .attr("width", 360)
                        .attr("height", 30)
                        .attr("class", "fisheryTextDivTitle")
                        .text(d + ' is the Number ' + (ranking + 1) + ' Exporter of ' + capitalizedFish + " in the World")
                        .style("font-weight", "bold")
                        .style("font-size", 19)

                    if (d === "Denmark") {
                        caption = "Allan Jorgensen, who has been a fisherman for 44 years, reels in the net of the fishing boat Linette shortly before departing for a two week fishing expedition. Source: Andrew Kelly Photo"
                    }
                    else if (d === "Norway") {
                        caption = "Norwegian fishermen unloading haddock. Source: Geir-Bjorn Nilsen"
                    }
                    else if (d === "Sweden") {
                        caption = "Swedish fishermen catching Carp Bream, a climate smart fish that unfortunately is often thrown back in the water when caught. Source: Roger Turesson"
                    }
                    else if (d === "United Kingdom") {
                        caption = "A fisherman hauls in a net full of fish while trawling in the English Channel. Source: Jason Alden, Bloomberg/Getty Images"
                    }
                    else if (d === "Chile") {
                        caption = "Fishermen cleaning their catch in Chile. Source: Jeremy Richards"
                    }
                    else if (d === "India") {
                        caption = "A huge catch of Sardines being loaded into weighing baskets in India. Source: Rudolph A. Furtado"
                    }
                    else if (d === "China") {
                        caption = "Fishermen unload noodle fish at Xiaogang wharf in Qingdao, Shandong province. Source: Alamy"
                    }
                    else if (d === "Vietnam") {
                        caption = "Processing seafood for exports at Godaco Company in Tien Giang Province. Source: Viet Hung"
                    }
                    else if (d === "Indonesia") {
                        caption = "Fishermen arrive at Bali's fishing village in Jimbaran with a fresh catch of tuna. Source: Sonny Tumbelka"
                    }
                    else if (d === "Thailand") {
                        caption = "Shrimp farmers sort out their produce in Prachuap Khiri Khan's Sam Roi Yod district. Source: Chaiwat Sardyaem"
                    }
                    else if (d === "Honduras") {
                        caption = "A tilapia farm on Lake Yojoa in northwest Honduras, where tilapia is considered the ideal fish because it tolerates overcrowding and does not need expensive meat-based feed. Source: Meridith Kohut for The New York Times"
                    }
                    else if (d === "Mexico") {
                        caption = "Mexican fishermen with a catch of Corvina in the Upper Gulf of Mexico. Source: Silvia Yee"
                    }
                    else if (d === "Netherlands") {
                        caption = "Tilapia being grown at an urban fish farm on the top floor of an abandoned five story office building in the The Netherlands. Source: Aquaculture ID"
                    }


                    var fo = map.append('foreignObject')
                        .attr("class", "fisheryFO")
                        .attr("width", 360)
                        .attr("height", 100)
                        .attr("x", mapWidth / 2 + 5)
                        .attr("y", 375);

                    var div = fo.append('xhtml:div')
                        .attr("width", 360)
                        .attr("height", 100)
                        .attr("x", mapWidth / 2)
                        .attr("y", 400)
                        .attr("class", "fisheryTextDiv")
                        .text(caption)

                }
            })


            // Making line graphs comparing traditional fishing production vs fish farms production
            // Resource for line graph and area animation: https://hackernoon.com/animating-line-charts-with-d3js
            const timeParser = d3.timeParse('%Y');
            compareFishing.forEach(d => {
                d['year'] = d['Year']
                d['Year'] = timeParser(d["Year"]);
                d['Aquaculture production (metric tons)'] = Number(d['Aquaculture production (metric tons)']);
                d['Capture fisheries production (metric tons)'] = Number(d['Capture fisheries production (metric tons)']);
            })

            if (selectedFish === 'salmon') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('Norway')

            }
            else if (selectedFish === 'shrimp') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('India')

            }
            else if (selectedFish === 'tilapia') {

                [dataset, buttonsData, captureExtent, aquaExtent] = drawGraph('China')

            }
            let combinedExtent = [Math.min(...captureExtent.concat(aquaExtent)), Math.max(...captureExtent.concat(aquaExtent))];

            combinedScale = d3.scaleLinear().domain(combinedExtent).range([graphHeight, 0]);
            graph_leftAxis = d3.axisLeft(combinedScale);

        }


        function highlightBar(barType, v) {
            v = v.toLowerCase()

            if (barType == "freshwater") {
                if (v === selectedFish) {
                    return '#3b5d78';
                }
                else {
                    return '#AED5F3'
                }
            }

            if (barType == "phosphorous") {
                if (v === selectedFish) {
                    return '#893B1D';
                }
                else {
                    return '#FF9C76'
                }
            }

            if (barType == "land") {
                if (v === selectedFish) {
                    return "#137E37"
                }
                else {
                    return "#ADEFAA"
                }
            }

            if (barType == "nitrogen") {
                if (v === selectedFish) {
                    return "#50408D"
                }
                else {
                    return "#B9AAEF"
                }
            }
        }


        function drawChart(data, barscale, leftaxisscale, column, barType, bottomAxis, bottomAxisG, annotationstohide, annotationstoshow, otheranimationstohide) {
            annotationstohide.selectAll('.x-axis').attr('visibility', 'hidden')
            annotationstoshow.selectAll('.x-axis').attr('visibility', 'visible')
            otheranimationstohide.selectAll('.x-axis').attr('visibility', 'hidden')

            bottomAxis.scale(barscale);
            bottomAxisG.transition().call(bottomAxis);

            chartArea1.selectAll('rect.bar').data(data)
                .join(enter => enter.append('rect')
                    .attr('class', 'bar')
                    .attr("x", d => barscale(0))
                    .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                    .attr("height", leftaxisscale.bandwidth())
                    .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))
                    .attr("opacity", 0)
                    .call(enter => enter.transition()
                        .attr('opacity', 1)),
                    update => update.call(update => update.transition()
                        .attr("fill", d => highlightBar(barType, d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("x", d => barscale(0))
                        .attr("y", d => leftaxisscale(d.Entity.split('(')[0].substr(0, d.Entity.split('(')[0].length - 1)))
                        .attr("height", leftaxisscale.bandwidth())
                        .attr("width", d => barscale(parseFloat(d[column])) - barscale(0))),
                    exit => exit.call(exit => exit.transition().attr('opacity', 0).remove()));
        }

        // source: https://towardsdatascience.com/how-i-created-an-interactive-scrolling-visualisation-with-d3-js-and-how-you-can-too-e116372e2c73

        let scroll = scroller().container(d3.select('#graphic'))

        let lastIndex, activeIndex = 0
        scroll.on('active', function (index) {
            d3.selectAll('.step')
                .transition().duration(500)
                .style('opacity', function (d, i) { return i === index ? 1 : 0.1; });
            //Next, we selection from a range of activationFunctions (which we create), based on the index of the current section. 
            activeIndex = index
            let sign = (activeIndex - lastIndex) < 0 ? -1 : 1;
            let scrolledSections = d3.range(lastIndex + sign, activeIndex + sign, sign);

            //adding a progress bar so users know where they are in the visualization
            if (isNaN(scrolledSections[0])) {
                d3.selectAll("#progress").attr("width", "0%")
            }
            else {
                //how do we get the bar to move specifically with where we are on the page?
                d3.selectAll("#progress").transition().duration(500).attr("width", scrolledSections[0] * 8.3 + "%")
            }

            scrolledSections.forEach(i => {
                activationFunctions[i]();
            })
            lastIndex = activeIndex;
        })
        scroll.on('progress', function (index, progress) {
            if (index == 2 & progress > 0.7) { }
        })

        let activationFunctions = [initial, first, addWaterInfo, addWaterBar, addLandInfo, addLandBar, addNitrogenInfo, addNitrogenBar, addPhosInfo, addPhosBar, addMap, addLineGraph, showReset]

    }

    getData();
</script>

</html>